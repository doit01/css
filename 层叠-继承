     CSS三大特性

            1 继承性

            2 层叠性

            3 优先级

            1 继承性

                特性：子元素有默认继承父元素样式的特点（子承父业）

                可以继承的常见属性：

                    1 color

                    2 font-style、font-weight、font-size、font-family

                    3 text-indent、text-align

                    4 line-height

                    5 ……

                注意：可以通过调试工具判断样式是否可以继承

                拓展

                    继承的应用

                        好处：可以在一定程度上减少代码

                        常见应用场景：

                            1 可以直接给ul设置 list-style:none 属性，从而去除列表默认的小圆点样式

                            2 直接给body标签设置统一的font-size，从而统一不同浏览器默认文字大小

                    继承失效的特殊情况

                        如果元素有浏览器默认样式，此时继承性依然存在，但是优先显示浏览器的默认样式

                        1 a标签的color会继承失效

                            其实color属性继承下来了，但是被浏览器默认设置的样式给覆盖掉了

                        2 h系列标签的font-size会继承失效

                            其实font-size属性继承下来了，但是被浏览器默认设置的样式给覆盖掉了

                        3 div的高度不能继承，但是宽度有类似于继承的效果

                            宽度属性不能继承，但是div有独占一行的特性

            2 层叠性

                特性：

                    1 给同一个标签设置不同的样式 → 此时样式会层叠叠加 → 会共同作用在标签上

                    2 给同一个标签设置相同的样式 → 此时样式会层叠覆盖 → 最终写在最后的样式会生效

                注意点：

                    1 当样式冲突时，只有当选择器优先级相同时，才能通过层叠性判断结果

            

            3 优先级

                特性：不同选择器具有不同的优先级，优先级高的选择器样式会覆盖优先级低选择器样式

                优先级公式：（作用范围越大，优先级越低）

                    继承 < 通配符选择器 < 标签选择器 < 类选择器 < id选择器 < 行内样式 < !important（声明样式具有最高优先级）

                注意点：

                    1 !important写在属性值的后面，分号的前面

                    2 !important不能提升继承的优先级

                    3 给继承父级的元素添加!important无效

                    4 实际开发中不建议使用 !important

                    

            3.1  权重叠加计算

                场景：如果是复合选择器，此时需要通过权重叠加计算方法，判断最终哪个选择器优先级最高会生效

                权重叠加计算公式：（行内式，id选择器，类选择器，标签选择器）

                    比较规则：左边个数越多，权重越大，左边个数相同，下一级个数越多，权重越大

                提示：!important权重最大，继承权重最小

                权重计算题解题步骤：

                    1 先判断选择器是否能直接选中标签，如果不能直接选中 → 是继承，优先级最低 → 直接pass

                    2 通过权重计算公式，判断谁权重最高

                注意：

                    实际开发中选择标签需要精准，尽量避免多个选择器同时选中一个标签的情况，不要自己难为自己
————————————————

                            版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。
                        
原文链接：https://blog.csdn.net/weixin_54021642/article/details/131315658




CSS3引入了许多新的特性，其中最引人注目的之一就是层叠（Cascading）和继承（Inheritance）机制。这些机制是CSS的核心，它们决定了如何将样式应用于HTML文档中的元素。理解这些机制对于编写高效、可维护的CSS代码至关重要。

层叠（Cascading）

层叠是CSS处理多个样式规则以决定元素最终样式的过程。当一个元素满足多个规则的条件时，CSS引擎会根据一定的规则决定哪个规则的样式将被应用。这些规则包括：

重要性（Importance）：

重要规则（使用!important声明的属性）将覆盖非重要规则。

例如：color: red !important;

来源（Origin）：

用户代理（浏览器默认样式）的规则

用户样式表

作者样式表（开发者编写的样式）

作者的“重要”规则将覆盖用户的重要规则，但被浏览器的重要规则覆盖。

特异性（Specificity）：

特异性是指选择器匹配特定元素的特定性的程度。特异性越高，规则越具体，优先级越高。

特异性计算方式：首先是ID选择器的数量，其次是类选择器、属性选择器或伪类的数量，最后是元素和伪元素的选择器的数量。

例如，#uniqueId的特异性高于.className，而div p的特异性又高于p。

顺序（Order）：

当两个规则的特异性相同，则按照它们在CSS文件中出现的顺序决定，后面的规则会覆盖前面的规则。

继承（Inheritance）

继承是CSS的一个特性，允许某些样式属性从父元素被子元素继承。不是所有的CSS属性都会继承。例如，文本相关的属性（如color、font-family、font-size等）通常会继承，而盒模型属性（如margin、padding、border等）则不会继承。

要使一个属性被子元素继承，可以使用inherit关键字，或者确保该属性在父元素上被设置为一个值（即使是默认值）。例如：

body {
    color: blue; /* 所有文本子元素将继承此颜色 */
}

或者：

p {
    color: inherit; /* 如果p元素的父元素有color属性，p将继承该颜色 */
}
结合使用层叠和继承

在实际开发中，合理地利用CSS的层叠和继承特性可以大大提高CSS代码的效率和可维护性。通过精确地控制特异性、顺序和继承性，可以确保元素的样式按预期方式应用。例如，你可以通过使用类选择器来避免高特异性选择器，从而保持样式的可重用性和灵活性。同时，合理利用继承可以减少重复的样式声明，使CSS更加简洁。

理解并正确应用CSS的层叠和继承机制是成为一名高效前端开发者的关键一步。